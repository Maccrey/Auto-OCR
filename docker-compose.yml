# K-OCR Web Corrector - Docker Compose Configuration
version: '3.8'

services:
  # Redis - 메시지 브로커 및 결과 백엔드
  redis:
    image: redis:7-alpine
    container_name: k-ocr-redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - k-ocr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # PostgreSQL - 메타데이터 저장 (선택사항)
  postgres:
    image: postgres:15-alpine
    container_name: k-ocr-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-k_ocr}
      POSTGRES_USER: ${POSTGRES_USER:-k_ocr_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - k-ocr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-k_ocr_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.2'

  # FastAPI 웹 애플리케이션
  web:
    build:
      context: .
      target: ${BUILD_TARGET:-production}
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VCS_REF=${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: k-ocr-web
    ports:
      - "${WEB_PORT:-8000}:8000"
    volumes:
      - temp_storage:/app/temp_storage
      - app_logs:/app/logs
      - ocr_models:/app/models
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-k_ocr_user}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-k_ocr}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-50}
      - MAX_CONCURRENT_UPLOADS=${MAX_CONCURRENT_UPLOADS:-10}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8000}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - k-ocr-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/download/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Celery Worker - OCR 처리
  worker:
    build:
      context: .
      target: worker
    container_name: k-ocr-worker
    volumes:
      - temp_storage:/app/temp_storage
      - app_logs:/app/logs
      - ocr_models:/app/models
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-k_ocr_user}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-k_ocr}
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
      - CELERY_WORKER_MAX_TASKS_PER_CHILD=${CELERY_WORKER_MAX_TASKS_PER_CHILD:-1000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - k-ocr-network
    healthcheck:
      test: ["CMD", "celery", "-A", "backend.core.tasks", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Celery Beat - 스케줄러
  scheduler:
    build:
      context: .
      target: scheduler
    container_name: k-ocr-scheduler
    volumes:
      - temp_storage:/app/temp_storage
      - app_logs:/app/logs
      - scheduler_data:/app/celerybeat-schedule
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-k_ocr_user}:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/${POSTGRES_DB:-k_ocr}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - k-ocr-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Celery Flower - 모니터링
  flower:
    build:
      context: .
      target: development
    container_name: k-ocr-flower
    command: >
      celery -A backend.core.tasks flower
      --port=5555
      --broker=redis://redis:6379/0
      --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower_password_123}
      --url_prefix=flower
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - worker
    networks:
      - k-ocr-network
    restart: unless-stopped
    profiles: ["monitoring", "development"]
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Nginx - 리버스 프록시 및 정적 파일 서빙
  nginx:
    image: nginx:alpine
    container_name: k-ocr-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/static:/var/www/static:ro
      - nginx_logs:/var/log/nginx
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - k-ocr-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles: ["production"]
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Prometheus - 메트릭 수집
  prometheus:
    image: prom/prometheus:latest
    container_name: k-ocr-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - k-ocr-network
    restart: unless-stopped
    profiles: ["monitoring"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'

  # Grafana - 메트릭 시각화
  grafana:
    image: grafana/grafana:latest
    container_name: k-ocr-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password_123}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - k-ocr-network
    restart: unless-stopped
    profiles: ["monitoring"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  temp_storage:
    driver: local
  app_logs:
    driver: local
  ocr_models:
    driver: local
  scheduler_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  k-ocr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16