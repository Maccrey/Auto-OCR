name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "18"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          tesseract-ocr \
          tesseract-ocr-kor \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1 \
          libgthread-2.0-0

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio

    - name: Create test environment file
      run: |
        cp .env.example .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        echo "TESTING=true" >> .env

    - name: Run code quality checks
      run: |
        # Code formatting check
        black --check backend/ tests/
        
        # Linting
        flake8 backend/ tests/
        
        # Type checking
        mypy backend/

    - name: Run tests with coverage
      run: |
        pytest tests/ \
          --cov=backend \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=85 \
          -v

    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security scan tools
      run: |
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/k-ocr-web
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 실제 배포 스크립트는 환경에 따라 구성
        # 예: kubectl, docker-compose, 클라우드 CLI 등

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 실제 배포 스크립트는 환경에 따라 구성

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.docker-build.result == 'success'
      run: |
        echo "✅ All checks passed successfully!"

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.docker-build.result == 'failure'
      run: |
        echo "❌ Some checks failed. Please review the logs."