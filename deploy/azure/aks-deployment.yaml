apiVersion: v1
kind: Namespace
metadata:
  name: k-ocr

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k-ocr-config
  namespace: k-ocr
data:
  ENVIRONMENT: "production"
  DATABASE_URL: "postgresql://k_ocr_user@k-ocr-postgres:password@k-ocr-postgres.postgres.database.azure.com:5432/k_ocr_db?sslmode=require"
  REDIS_URL: "rediss://k-ocr-redis.redis.cache.windows.net:6380/0"
  AZURE_SUBSCRIPTION_ID: "your-subscription-id"
  AZURE_RESOURCE_GROUP: "k-ocr-rg"
  AZURE_LOCATION: "East US"

---
apiVersion: v1
kind: Secret
metadata:
  name: k-ocr-secrets
  namespace: k-ocr
type: Opaque
data:
  SECRET_KEY: <base64-encoded-secret-key>
  POSTGRES_PASSWORD: <base64-encoded-postgres-password>
  AZURE_CLIENT_ID: <base64-encoded-client-id>
  AZURE_CLIENT_SECRET: <base64-encoded-client-secret>
  AZURE_TENANT_ID: <base64-encoded-tenant-id>

---
apiVersion: v1
kind: Service
metadata:
  name: k-ocr-web-service
  namespace: k-ocr
  labels:
    app: k-ocr-web
spec:
  selector:
    app: k-ocr-web
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k-ocr-web
  namespace: k-ocr
  labels:
    app: k-ocr-web
    aadpodidbinding: k-ocr-pod-identity
spec:
  replicas: 3
  selector:
    matchLabels:
      app: k-ocr-web
  template:
    metadata:
      labels:
        app: k-ocr-web
        aadpodidbinding: k-ocr-pod-identity
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: k-ocr-web
        image: kocracr.azurecr.io/k-ocr-web-corrector:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: k-ocr-secrets
              key: SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: k-ocr-secrets
              key: POSTGRES_PASSWORD
        - name: AZURE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: k-ocr-secrets
              key: AZURE_CLIENT_ID
        - name: AZURE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: k-ocr-secrets
              key: AZURE_CLIENT_SECRET
        - name: AZURE_TENANT_ID
          valueFrom:
            secretKeyRef:
              name: k-ocr-secrets
              key: AZURE_TENANT_ID
        envFrom:
        - configMapRef:
            name: k-ocr-config
        volumeMounts:
        - name: temp-storage
          mountPath: /app/temp_storage
        - name: ocr-models
          mountPath: /app/models
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/download/health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/download/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/download/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: temp-storage
        persistentVolumeClaim:
          claimName: k-ocr-temp-storage-pvc
      - name: ocr-models
        persistentVolumeClaim:
          claimName: k-ocr-models-pvc
      initContainers:
      - name: model-downloader
        image: kocracr.azurecr.io/k-ocr-web-corrector:latest
        command: ["python", "scripts/download_models.py"]
        env:
        - name: MODEL_CACHE_DIR
          value: "/app/models"
        volumeMounts:
        - name: ocr-models
          mountPath: /app/models
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k-ocr-worker
  namespace: k-ocr
  labels:
    app: k-ocr-worker
    aadpodidbinding: k-ocr-pod-identity
spec:
  replicas: 2
  selector:
    matchLabels:
      app: k-ocr-worker
  template:
    metadata:
      labels:
        app: k-ocr-worker
        aadpodidbinding: k-ocr-pod-identity
    spec:
      containers:
      - name: k-ocr-worker
        image: kocracr.azurecr.io/k-ocr-web-corrector:latest
        command: ["celery", "-A", "backend.core.tasks", "worker", "--loglevel=info", "--concurrency=2"]
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: k-ocr-secrets
              key: SECRET_KEY
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: k-ocr-secrets
              key: POSTGRES_PASSWORD
        - name: AZURE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: k-ocr-secrets
              key: AZURE_CLIENT_ID
        - name: AZURE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: k-ocr-secrets
              key: AZURE_CLIENT_SECRET
        - name: AZURE_TENANT_ID
          valueFrom:
            secretKeyRef:
              name: k-ocr-secrets
              key: AZURE_TENANT_ID
        envFrom:
        - configMapRef:
            name: k-ocr-config
        volumeMounts:
        - name: temp-storage
          mountPath: /app/temp_storage
        - name: ocr-models
          mountPath: /app/models
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
      volumes:
      - name: temp-storage
        persistentVolumeClaim:
          claimName: k-ocr-temp-storage-pvc
      - name: ocr-models
        persistentVolumeClaim:
          claimName: k-ocr-models-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: k-ocr-temp-storage-pvc
  namespace: k-ocr
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile
  resources:
    requests:
      storage: 50Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: k-ocr-models-pvc
  namespace: k-ocr
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile
  resources:
    requests:
      storage: 20Gi

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: k-ocr-ingress
  namespace: k-ocr
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    appgw.ingress.kubernetes.io/request-timeout: "300"
    appgw.ingress.kubernetes.io/connection-draining-timeout: "60"
    appgw.ingress.kubernetes.io/health-probe-path: "/api/download/health"
    appgw.ingress.kubernetes.io/health-probe-interval: "30"
    appgw.ingress.kubernetes.io/health-probe-timeout: "10"
    appgw.ingress.kubernetes.io/health-probe-unhealthy-threshold: "3"
    appgw.ingress.kubernetes.io/cookie-based-affinity: "enabled"
spec:
  tls:
  - hosts:
    - k-ocr.yourdomain.com
    secretName: k-ocr-tls-secret
  rules:
  - host: k-ocr.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: k-ocr-web-service
            port:
              number: 8000

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: k-ocr-web-hpa
  namespace: k-ocr
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: k-ocr-web
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: k-ocr-worker-hpa
  namespace: k-ocr
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: k-ocr-worker
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 200
        periodSeconds: 15

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k-ocr-service-account
  namespace: k-ocr
  annotations:
    azure.workload.identity/client-id: "your-managed-identity-client-id"

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: k-ocr-web-pdb
  namespace: k-ocr
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: k-ocr-web

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: k-ocr-worker-pdb
  namespace: k-ocr
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: k-ocr-worker

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: k-ocr-network-policy
  namespace: k-ocr
spec:
  podSelector:
    matchLabels:
      app: k-ocr-web
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - podSelector:
        matchLabels:
          app: k-ocr-worker
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6380  # Redis SSL
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS