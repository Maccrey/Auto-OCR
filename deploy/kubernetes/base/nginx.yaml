apiVersion: v1
kind: Service
metadata:
  name: k-ocr-nginx
  namespace: k-ocr
  labels:
    app.kubernetes.io/name: k-ocr-nginx
    app.kubernetes.io/component: proxy
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app.kubernetes.io/name: k-ocr-nginx

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k-ocr-nginx
  namespace: k-ocr
  labels:
    app.kubernetes.io/name: k-ocr-nginx
    app.kubernetes.io/component: proxy
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: k-ocr-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: k-ocr-nginx
        app.kubernetes.io/component: proxy
        app.kubernetes.io/version: "1.0.0"
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: static-files
          mountPath: /var/www/static
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-config
        configMap:
          name: k-ocr-nginx-config
      - name: static-files
        emptyDir: {}
      initContainers:
      - name: static-files-copier
        image: k-ocr-web-corrector:latest
        command: ['cp', '-r', '/app/frontend/static/*', '/var/www/static/']
        volumeMounts:
        - name: static-files
          mountPath: /var/www/static